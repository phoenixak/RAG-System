[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "enterprise-rag-system"
version = "1.0.0"
description = "Production-ready Enterprise RAG system with intelligent document search and conversational AI"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "phoenixak", email = "phoniex199940@gmail.com" }]
maintainers = [{ name = "phoenixak", email = "phoniex199940@gmail.com" }]
keywords = [
    "rag",
    "ai",
    "search",
    "enterprise",
    "document-processing",
    "vector-search",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Indexing",
]
requires-python = ">=3.9"
dependencies = [
    # Core backend dependencies
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",
    "python-multipart==0.0.6",
    "pydantic==2.5.0",
    "pydantic-settings==2.1.0",
    "python-dotenv==1.0.0",

    # Authentication and security
    "PyJWT==2.8.0",
    "passlib[bcrypt]==1.7.4",
    "python-jose[cryptography]==3.3.0",
    "email-validator==2.1.0",

    # Database and storage
    "redis==5.0.1",
    "asyncpg==0.29.0",
    "sqlalchemy==2.0.23",
    "chromadb==0.4.15",

    # AI and ML dependencies
    "sentence-transformers==2.2.2",
    "rank-bm25==0.2.2",
    "scikit-learn>=1.3.2",

    # Document processing
    "PyPDF2==3.0.1",
    "python-docx==1.1.0",
    "pandas>=2.1.4",
    "pdfplumber==0.10.0",
    "tiktoken==0.5.2",

    # Frontend dependencies
    "streamlit==1.28.1",

    # Logging and monitoring
    "structlog==23.2.0",
    "rich==13.7.0",

    # HTTP client and server
    "httpx==0.25.2",
    "gunicorn==21.2.0",

    # LLM providers
    "openai>=1.0.0",
    "anthropic>=0.7.0",
]

[project.optional-dependencies]
dev = [
    # Testing dependencies
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "pytest-mock==3.12.0",
    "pytest-cov==4.1.0",

    # Code quality tools
    "black==23.11.0",
    "isort==5.12.0",
    "flake8==6.1.0",
    "mypy==1.7.1",
    "pre-commit>=3.0.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]
monitoring = ["prometheus-client==0.19.0", "sentry-sdk>=1.32.0"]
enhanced-ui = [
    "streamlit-option-menu==0.3.6",
    "streamlit-authenticator==0.2.3",
    "streamlit-chat==0.1.1",
    "plotly>=5.17.0",
    "altair>=5.0.0",
]

[project.urls]
Homepage = "https://github.com/enterprise-rag/enterprise-rag-system"
Documentation = "https://enterprise-rag.readthedocs.io/"
Repository = "https://github.com/enterprise-rag/enterprise-rag-system.git"
Issues = "https://github.com/enterprise-rag/enterprise-rag-system/issues"
Changelog = "https://github.com/enterprise-rag/enterprise-rag-system/blob/main/CHANGELOG.md"

[project.scripts]
rag-server = "app.main:main"
rag-web = "app.web.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]
known_third_party = ["fastapi", "pydantic", "streamlit", "chromadb"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["chromadb.*", "sentence_transformers.*", "streamlit.*", "rank_bm25.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*", "*/conftest.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
